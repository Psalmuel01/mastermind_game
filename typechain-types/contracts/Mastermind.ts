/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Mastermind {
  export type GuessStruct = {
    code: PromiseOrValue<BigNumberish>[];
    blackPegs: PromiseOrValue<BigNumberish>;
    whitePegs: PromiseOrValue<BigNumberish>;
    correct: PromiseOrValue<boolean>;
  };

  export type GuessStructOutput = [number[], number, number, boolean] & {
    code: number[];
    blackPegs: number;
    whitePegs: number;
    correct: boolean;
  };
}

export interface MastermindInterface extends utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "codebreaker()": FunctionFragment;
    "codemaker()": FunctionFragment;
    "gameActive()": FunctionFragment;
    "gameStatus()": FunctionFragment;
    "getAllFeedback()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getBreakerScore()": FunctionFragment;
    "getGuesses()": FunctionFragment;
    "getGuessesCodes()": FunctionFragment;
    "getLatestFeedback()": FunctionFragment;
    "getMakerScore()": FunctionFragment;
    "getSecret()": FunctionFragment;
    "guessCount()": FunctionFragment;
    "guesses(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "makeGuess(uint8[])": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "scoreCodebreaker()": FunctionFragment;
    "scoreCodemaker()": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setCodebreaker()": FunctionFragment;
    "setCodemaker()": FunctionFragment;
    "startGame(uint8[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approve"
      | "balanceOf"
      | "codebreaker"
      | "codemaker"
      | "gameActive"
      | "gameStatus"
      | "getAllFeedback"
      | "getApproved"
      | "getBreakerScore"
      | "getGuesses"
      | "getGuessesCodes"
      | "getLatestFeedback"
      | "getMakerScore"
      | "getSecret"
      | "guessCount"
      | "guesses"
      | "isApprovedForAll"
      | "makeGuess"
      | "name"
      | "ownerOf"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "scoreCodebreaker"
      | "scoreCodemaker"
      | "setApprovalForAll"
      | "setCodebreaker"
      | "setCodemaker"
      | "startGame"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "codebreaker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "codemaker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gameActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllFeedback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBreakerScore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGuesses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGuessesCodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestFeedback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMakerScore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getSecret", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "guessCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "guesses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "makeGuess",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scoreCodebreaker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scoreCodemaker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCodebreaker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCodemaker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startGame",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "codebreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "codemaker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllFeedback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBreakerScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGuesses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGuessesCodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestFeedback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMakerScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSecret", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guessCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guesses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeGuess", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scoreCodebreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scoreCodemaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCodebreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCodemaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "CodebreakerSet(address,uint256)": EventFragment;
    "CodemakerSet(address,uint256)": EventFragment;
    "GameEnded(address,uint256)": EventFragment;
    "GameStarted(address,uint256)": EventFragment;
    "GameStatusChanged(uint8,uint256)": EventFragment;
    "GuessMade(address,uint8[],uint8,uint8,bool,uint256)": EventFragment;
    "ScoreUpdated(uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CodebreakerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CodemakerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuessMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScoreUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface CodebreakerSetEventObject {
  codebreaker: string;
  timestamp: BigNumber;
}
export type CodebreakerSetEvent = TypedEvent<
  [string, BigNumber],
  CodebreakerSetEventObject
>;

export type CodebreakerSetEventFilter = TypedEventFilter<CodebreakerSetEvent>;

export interface CodemakerSetEventObject {
  codemaker: string;
  timestamp: BigNumber;
}
export type CodemakerSetEvent = TypedEvent<
  [string, BigNumber],
  CodemakerSetEventObject
>;

export type CodemakerSetEventFilter = TypedEventFilter<CodemakerSetEvent>;

export interface GameEndedEventObject {
  winner: string;
  timestamp: BigNumber;
}
export type GameEndedEvent = TypedEvent<
  [string, BigNumber],
  GameEndedEventObject
>;

export type GameEndedEventFilter = TypedEventFilter<GameEndedEvent>;

export interface GameStartedEventObject {
  codemaker: string;
  timestamp: BigNumber;
}
export type GameStartedEvent = TypedEvent<
  [string, BigNumber],
  GameStartedEventObject
>;

export type GameStartedEventFilter = TypedEventFilter<GameStartedEvent>;

export interface GameStatusChangedEventObject {
  status: number;
  timestamp: BigNumber;
}
export type GameStatusChangedEvent = TypedEvent<
  [number, BigNumber],
  GameStatusChangedEventObject
>;

export type GameStatusChangedEventFilter =
  TypedEventFilter<GameStatusChangedEvent>;

export interface GuessMadeEventObject {
  codebreaker: string;
  guess: number[];
  blackPegs: number;
  whitePegs: number;
  correct: boolean;
  timestamp: BigNumber;
}
export type GuessMadeEvent = TypedEvent<
  [string, number[], number, number, boolean, BigNumber],
  GuessMadeEventObject
>;

export type GuessMadeEventFilter = TypedEventFilter<GuessMadeEvent>;

export interface ScoreUpdatedEventObject {
  scoreCodebreaker: BigNumber;
  scoreCodemaker: BigNumber;
  timestamp: BigNumber;
}
export type ScoreUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  ScoreUpdatedEventObject
>;

export type ScoreUpdatedEventFilter = TypedEventFilter<ScoreUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Mastermind extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MastermindInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    codebreaker(overrides?: CallOverrides): Promise<[string]>;

    codemaker(overrides?: CallOverrides): Promise<[string]>;

    gameActive(overrides?: CallOverrides): Promise<[boolean]>;

    gameStatus(overrides?: CallOverrides): Promise<[number]>;

    getAllFeedback(overrides?: CallOverrides): Promise<[[number, number][]]>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBreakerScore(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGuesses(
      overrides?: CallOverrides
    ): Promise<[Mastermind.GuessStructOutput[]]>;

    getGuessesCodes(overrides?: CallOverrides): Promise<[number[][]]>;

    getLatestFeedback(
      overrides?: CallOverrides
    ): Promise<[number, number] & { blackPegs: number; whitePegs: number }>;

    getMakerScore(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSecret(
      overrides?: CallOverrides
    ): Promise<[number[]] & { _secret: number[] }>;

    guessCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    guesses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, boolean] & {
        blackPegs: number;
        whitePegs: number;
        correct: boolean;
      }
    >;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    makeGuess(
      _guess: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scoreCodebreaker(overrides?: CallOverrides): Promise<[BigNumber]>;

    scoreCodemaker(overrides?: CallOverrides): Promise<[BigNumber]>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCodebreaker(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCodemaker(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startGame(
      _secretCode: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  codebreaker(overrides?: CallOverrides): Promise<string>;

  codemaker(overrides?: CallOverrides): Promise<string>;

  gameActive(overrides?: CallOverrides): Promise<boolean>;

  gameStatus(overrides?: CallOverrides): Promise<number>;

  getAllFeedback(overrides?: CallOverrides): Promise<[number, number][]>;

  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getBreakerScore(overrides?: CallOverrides): Promise<BigNumber>;

  getGuesses(
    overrides?: CallOverrides
  ): Promise<Mastermind.GuessStructOutput[]>;

  getGuessesCodes(overrides?: CallOverrides): Promise<number[][]>;

  getLatestFeedback(
    overrides?: CallOverrides
  ): Promise<[number, number] & { blackPegs: number; whitePegs: number }>;

  getMakerScore(overrides?: CallOverrides): Promise<BigNumber>;

  getSecret(overrides?: CallOverrides): Promise<number[]>;

  guessCount(overrides?: CallOverrides): Promise<BigNumber>;

  guesses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, number, boolean] & {
      blackPegs: number;
      whitePegs: number;
      correct: boolean;
    }
  >;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  makeGuess(
    _guess: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scoreCodebreaker(overrides?: CallOverrides): Promise<BigNumber>;

  scoreCodemaker(overrides?: CallOverrides): Promise<BigNumber>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCodebreaker(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCodemaker(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startGame(
    _secretCode: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    codebreaker(overrides?: CallOverrides): Promise<string>;

    codemaker(overrides?: CallOverrides): Promise<string>;

    gameActive(overrides?: CallOverrides): Promise<boolean>;

    gameStatus(overrides?: CallOverrides): Promise<number>;

    getAllFeedback(overrides?: CallOverrides): Promise<[number, number][]>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getBreakerScore(overrides?: CallOverrides): Promise<BigNumber>;

    getGuesses(
      overrides?: CallOverrides
    ): Promise<Mastermind.GuessStructOutput[]>;

    getGuessesCodes(overrides?: CallOverrides): Promise<number[][]>;

    getLatestFeedback(
      overrides?: CallOverrides
    ): Promise<[number, number] & { blackPegs: number; whitePegs: number }>;

    getMakerScore(overrides?: CallOverrides): Promise<BigNumber>;

    getSecret(overrides?: CallOverrides): Promise<number[]>;

    guessCount(overrides?: CallOverrides): Promise<BigNumber>;

    guesses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, boolean] & {
        blackPegs: number;
        whitePegs: number;
        correct: boolean;
      }
    >;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    makeGuess(
      _guess: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    scoreCodebreaker(overrides?: CallOverrides): Promise<BigNumber>;

    scoreCodemaker(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCodebreaker(overrides?: CallOverrides): Promise<void>;

    setCodemaker(overrides?: CallOverrides): Promise<void>;

    startGame(
      _secretCode: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "CodebreakerSet(address,uint256)"(
      codebreaker?: PromiseOrValue<string> | null,
      timestamp?: null
    ): CodebreakerSetEventFilter;
    CodebreakerSet(
      codebreaker?: PromiseOrValue<string> | null,
      timestamp?: null
    ): CodebreakerSetEventFilter;

    "CodemakerSet(address,uint256)"(
      codemaker?: PromiseOrValue<string> | null,
      timestamp?: null
    ): CodemakerSetEventFilter;
    CodemakerSet(
      codemaker?: PromiseOrValue<string> | null,
      timestamp?: null
    ): CodemakerSetEventFilter;

    "GameEnded(address,uint256)"(
      winner?: PromiseOrValue<string> | null,
      timestamp?: null
    ): GameEndedEventFilter;
    GameEnded(
      winner?: PromiseOrValue<string> | null,
      timestamp?: null
    ): GameEndedEventFilter;

    "GameStarted(address,uint256)"(
      codemaker?: PromiseOrValue<string> | null,
      timestamp?: null
    ): GameStartedEventFilter;
    GameStarted(
      codemaker?: PromiseOrValue<string> | null,
      timestamp?: null
    ): GameStartedEventFilter;

    "GameStatusChanged(uint8,uint256)"(
      status?: null,
      timestamp?: null
    ): GameStatusChangedEventFilter;
    GameStatusChanged(
      status?: null,
      timestamp?: null
    ): GameStatusChangedEventFilter;

    "GuessMade(address,uint8[],uint8,uint8,bool,uint256)"(
      codebreaker?: PromiseOrValue<string> | null,
      guess?: null,
      blackPegs?: null,
      whitePegs?: null,
      correct?: null,
      timestamp?: null
    ): GuessMadeEventFilter;
    GuessMade(
      codebreaker?: PromiseOrValue<string> | null,
      guess?: null,
      blackPegs?: null,
      whitePegs?: null,
      correct?: null,
      timestamp?: null
    ): GuessMadeEventFilter;

    "ScoreUpdated(uint256,uint256,uint256)"(
      scoreCodebreaker?: null,
      scoreCodemaker?: null,
      timestamp?: null
    ): ScoreUpdatedEventFilter;
    ScoreUpdated(
      scoreCodebreaker?: null,
      scoreCodemaker?: null,
      timestamp?: null
    ): ScoreUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
  };

  estimateGas: {
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    codebreaker(overrides?: CallOverrides): Promise<BigNumber>;

    codemaker(overrides?: CallOverrides): Promise<BigNumber>;

    gameActive(overrides?: CallOverrides): Promise<BigNumber>;

    gameStatus(overrides?: CallOverrides): Promise<BigNumber>;

    getAllFeedback(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBreakerScore(overrides?: CallOverrides): Promise<BigNumber>;

    getGuesses(overrides?: CallOverrides): Promise<BigNumber>;

    getGuessesCodes(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestFeedback(overrides?: CallOverrides): Promise<BigNumber>;

    getMakerScore(overrides?: CallOverrides): Promise<BigNumber>;

    getSecret(overrides?: CallOverrides): Promise<BigNumber>;

    guessCount(overrides?: CallOverrides): Promise<BigNumber>;

    guesses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeGuess(
      _guess: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scoreCodebreaker(overrides?: CallOverrides): Promise<BigNumber>;

    scoreCodemaker(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCodebreaker(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCodemaker(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startGame(
      _secretCode: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    codebreaker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    codemaker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllFeedback(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBreakerScore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGuesses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGuessesCodes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLatestFeedback(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMakerScore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSecret(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guessCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guesses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeGuess(
      _guess: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scoreCodebreaker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scoreCodemaker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCodebreaker(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCodemaker(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startGame(
      _secretCode: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
